// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
#[warn(single_use_lifetimes)]
mod imp {
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;

    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("ifunc_bpf")
            .map("rb", false)
            .map("resolve_addr", false)
            .map("impl_addr", false)
            .map("ifunc_bp.bss", true)
            .prog("resolve_trace")
            .prog("impl_trace")
            .prog("ifunc_trace");

        builder.build()
    }

    #[derive(Default)]
    pub struct IfuncSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> SkelBuilder<'a> for IfuncSkelBuilder {
        type Output = OpenIfuncSkel<'a>;
        fn open(mut self) -> libbpf_rs::Result<OpenIfuncSkel<'a>> {
            let mut skel_config = build_skel_config()?;
            let open_opts = self.obj_builder.opts(std::ptr::null());

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenIfuncSkel { obj, skel_config })
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenIfuncSkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenIfuncSkel { obj, skel_config })
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    pub struct OpenIfuncMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenIfuncMaps<'_> {
        pub fn rb(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("rb").unwrap()
        }

        pub fn resolve_addr(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("resolve_addr").unwrap()
        }

        pub fn impl_addr(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("impl_addr").unwrap()
        }

        pub fn bss(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("ifunc_bp.bss").unwrap()
        }
    }

    pub struct OpenIfuncMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenIfuncMapsMut<'_> {
        pub fn rb(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("rb").unwrap()
        }

        pub fn resolve_addr(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("resolve_addr").unwrap()
        }

        pub fn impl_addr(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("impl_addr").unwrap()
        }

        pub fn bss(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("ifunc_bp.bss").unwrap()
        }
    }

    pub struct OpenIfuncProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenIfuncProgs<'_> {
        pub fn resolve_trace(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("resolve_trace").unwrap()
        }

        pub fn impl_trace(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("impl_trace").unwrap()
        }

        pub fn ifunc_trace(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("ifunc_trace").unwrap()
        }
    }

    pub struct OpenIfuncProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenIfuncProgsMut<'_> {
        pub fn resolve_trace(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("resolve_trace").unwrap()
        }

        pub fn impl_trace(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("impl_trace").unwrap()
        }

        pub fn ifunc_trace(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("ifunc_trace").unwrap()
        }
    }

    pub mod ifunc_bss_types {
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct bss {
            pub _data: data_t,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct data_t {
            pub pid: i32,
            pub uid: i32,
            pub size: i32,
            pub comm: [u8; 32],
            pub str: [u8; 256],
        }
        impl Default for data_t {
            fn default() -> Self {
                data_t {
                    pid: i32::default(),
                    uid: i32::default(),
                    size: i32::default(),
                    comm: [u8::default(); 32],
                    str: [u8::default(); 256],
                }
            }
        }
    }

    pub struct OpenIfuncSkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenSkel for OpenIfuncSkel<'a> {
        type Output = IfuncSkel<'a>;
        fn load(mut self) -> libbpf_rs::Result<IfuncSkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(IfuncSkel {
                obj,
                skel_config: self.skel_config,
                links: IfuncLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            &self.obj
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            &mut self.obj
        }
    }
    impl OpenIfuncSkel<'_> {
        pub fn progs(&self) -> OpenIfuncProgs<'_> {
            OpenIfuncProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> OpenIfuncProgsMut<'_> {
            OpenIfuncProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenIfuncMaps<'_> {
            OpenIfuncMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenIfuncMapsMut<'_> {
            OpenIfuncMapsMut {
                inner: &mut self.obj,
            }
        }

        pub fn bss(&mut self) -> &'_ mut ifunc_bss_types::bss {
            unsafe {
                std::mem::transmute::<*mut std::ffi::c_void, &'_ mut ifunc_bss_types::bss>(
                    self.skel_config.map_mmap_ptr(3).unwrap(),
                )
            }
        }
    }

    pub struct IfuncMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl IfuncMaps<'_> {
        pub fn rb(&self) -> &libbpf_rs::Map {
            self.inner.map("rb").unwrap()
        }

        pub fn resolve_addr(&self) -> &libbpf_rs::Map {
            self.inner.map("resolve_addr").unwrap()
        }

        pub fn impl_addr(&self) -> &libbpf_rs::Map {
            self.inner.map("impl_addr").unwrap()
        }

        pub fn bss(&self) -> &libbpf_rs::Map {
            self.inner.map("ifunc_bp.bss").unwrap()
        }
    }

    pub struct IfuncMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl IfuncMapsMut<'_> {
        pub fn rb(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("rb").unwrap()
        }

        pub fn resolve_addr(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("resolve_addr").unwrap()
        }

        pub fn impl_addr(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("impl_addr").unwrap()
        }

        pub fn bss(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("ifunc_bp.bss").unwrap()
        }
    }

    pub struct IfuncProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl IfuncProgs<'_> {
        pub fn resolve_trace(&self) -> &libbpf_rs::Program {
            self.inner.prog("resolve_trace").unwrap()
        }

        pub fn impl_trace(&self) -> &libbpf_rs::Program {
            self.inner.prog("impl_trace").unwrap()
        }

        pub fn ifunc_trace(&self) -> &libbpf_rs::Program {
            self.inner.prog("ifunc_trace").unwrap()
        }
    }

    pub struct IfuncProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl IfuncProgsMut<'_> {
        pub fn resolve_trace(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("resolve_trace").unwrap()
        }

        pub fn impl_trace(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("impl_trace").unwrap()
        }

        pub fn ifunc_trace(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("ifunc_trace").unwrap()
        }
    }

    #[derive(Default)]
    pub struct IfuncLinks {
        pub resolve_trace: Option<libbpf_rs::Link>,
        pub impl_trace: Option<libbpf_rs::Link>,
        pub ifunc_trace: Option<libbpf_rs::Link>,
    }

    pub struct IfuncSkel<'a> {
        pub obj: libbpf_rs::Object,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
        pub links: IfuncLinks,
    }

    unsafe impl Send for IfuncSkel<'_> {}
    unsafe impl Sync for IfuncSkel<'_> {}

    impl Skel for IfuncSkel<'_> {
        fn object(&self) -> &libbpf_rs::Object {
            &self.obj
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            &mut self.obj
        }

        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            self.links = IfuncLinks {
                resolve_trace: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
                impl_trace: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(1)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
                ifunc_trace: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(2)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
            };

            Ok(())
        }
    }
    impl IfuncSkel<'_> {
        pub fn progs(&self) -> IfuncProgs<'_> {
            IfuncProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> IfuncProgsMut<'_> {
            IfuncProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> IfuncMaps<'_> {
            IfuncMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> IfuncMapsMut<'_> {
            IfuncMapsMut {
                inner: &mut self.obj,
            }
        }

        pub fn bss(&mut self) -> &'_ mut ifunc_bss_types::bss {
            unsafe {
                std::mem::transmute::<*mut std::ffi::c_void, &'_ mut ifunc_bss_types::bss>(
                    self.skel_config.map_mmap_ptr(3).unwrap(),
                )
            }
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 12, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 117, 112, 114, 111, 98, 101, 0, 117, 114, 101, 116, 112, 114, 111, 98, 101, 0, 46,
        98, 115, 115, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0, 105, 102,
        117, 110, 99, 46, 98, 112, 102, 46, 99, 0, 114, 101, 115, 111, 108, 118, 101, 95, 116, 114,
        97, 99, 101, 0, 114, 101, 115, 111, 108, 118, 101, 95, 97, 100, 100, 114, 0, 105, 109, 112,
        108, 95, 116, 114, 97, 99, 101, 0, 105, 109, 112, 108, 95, 97, 100, 100, 114, 0, 105, 102,
        117, 110, 99, 95, 116, 114, 97, 99, 101, 0, 114, 98, 0, 95, 100, 97, 116, 97, 0, 95, 108,
        105, 99, 101, 110, 115, 101, 0, 46, 114, 101, 108, 117, 112, 114, 111, 98, 101, 0, 46, 114,
        101, 108, 117, 114, 101, 116, 112, 114, 111, 98, 101, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70,
        46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 53, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 17, 0, 7, 0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0,
        0, 0, 0, 0, 0, 92, 0, 0, 0, 18, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
        103, 0, 0, 0, 17, 0, 7, 0, 48, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
        18, 0, 4, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 17, 0, 7, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 44, 1, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 17, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0,
        0, 0, 0, 0, 0, 121, 18, 128, 0, 0, 0, 0, 0, 123, 42, 248, 255, 0, 0, 0, 0, 191, 164, 0, 0,
        0, 0, 0, 0, 7, 4, 0, 0, 248, 255, 255, 255, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 24, 3, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 183, 5, 0, 0, 8, 0, 0, 0, 133,
        0, 0, 0, 25, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 121, 18, 80, 0,
        0, 0, 0, 0, 123, 42, 248, 255, 0, 0, 0, 0, 191, 164, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 248,
        255, 255, 255, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0, 255, 255, 255,
        255, 0, 0, 0, 0, 0, 0, 0, 0, 183, 5, 0, 0, 8, 0, 0, 0, 133, 0, 0, 0, 25, 0, 0, 0, 183, 0,
        0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 191, 22, 0, 0, 0, 0, 0, 0, 121, 103, 80, 0, 0,
        0, 0, 0, 183, 1, 0, 0, 0, 0, 0, 0, 99, 26, 248, 255, 0, 0, 0, 0, 123, 26, 240, 255, 0, 0,
        0, 0, 123, 26, 232, 255, 0, 0, 0, 0, 123, 26, 224, 255, 0, 0, 0, 0, 123, 26, 216, 255, 0,
        0, 0, 0, 123, 26, 208, 255, 0, 0, 0, 0, 123, 26, 200, 255, 0, 0, 0, 0, 123, 26, 192, 255,
        0, 0, 0, 0, 123, 26, 184, 255, 0, 0, 0, 0, 123, 26, 176, 255, 0, 0, 0, 0, 123, 26, 168,
        255, 0, 0, 0, 0, 123, 26, 160, 255, 0, 0, 0, 0, 123, 26, 152, 255, 0, 0, 0, 0, 123, 26,
        144, 255, 0, 0, 0, 0, 123, 26, 136, 255, 0, 0, 0, 0, 123, 26, 128, 255, 0, 0, 0, 0, 123,
        26, 120, 255, 0, 0, 0, 0, 123, 26, 112, 255, 0, 0, 0, 0, 123, 26, 104, 255, 0, 0, 0, 0,
        123, 26, 96, 255, 0, 0, 0, 0, 123, 26, 88, 255, 0, 0, 0, 0, 123, 26, 80, 255, 0, 0, 0, 0,
        123, 26, 72, 255, 0, 0, 0, 0, 123, 26, 64, 255, 0, 0, 0, 0, 123, 26, 56, 255, 0, 0, 0, 0,
        123, 26, 48, 255, 0, 0, 0, 0, 123, 26, 40, 255, 0, 0, 0, 0, 123, 26, 32, 255, 0, 0, 0, 0,
        123, 26, 24, 255, 0, 0, 0, 0, 123, 26, 16, 255, 0, 0, 0, 0, 123, 26, 8, 255, 0, 0, 0, 0,
        123, 26, 0, 255, 0, 0, 0, 0, 123, 26, 248, 254, 0, 0, 0, 0, 123, 26, 240, 254, 0, 0, 0, 0,
        123, 26, 232, 254, 0, 0, 0, 0, 123, 26, 224, 254, 0, 0, 0, 0, 123, 26, 216, 254, 0, 0, 0,
        0, 133, 0, 0, 0, 14, 0, 0, 0, 119, 0, 0, 0, 32, 0, 0, 0, 99, 10, 208, 254, 0, 0, 0, 0, 133,
        0, 0, 0, 15, 0, 0, 0, 99, 10, 212, 254, 0, 0, 0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0,
        220, 254, 255, 255, 183, 2, 0, 0, 32, 0, 0, 0, 133, 0, 0, 0, 16, 0, 0, 0, 121, 99, 112, 0,
        0, 0, 0, 0, 99, 122, 216, 254, 0, 0, 0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 252,
        254, 255, 255, 183, 2, 0, 0, 0, 1, 0, 0, 133, 0, 0, 0, 112, 0, 0, 0, 191, 162, 0, 0, 0, 0,
        0, 0, 7, 2, 0, 0, 208, 254, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
        3, 0, 0, 44, 1, 0, 0, 183, 4, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 130, 0, 0, 0, 183, 0, 0, 0,
        0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 68, 117, 97, 108, 32, 66, 83, 68, 47, 71, 80, 76, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 5, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 40, 2, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 228, 3, 0, 0,
        228, 3, 0, 0, 235, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4,
        0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 27, 0, 0,
        0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0,
        4, 16, 0, 0, 0, 25, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0,
        42, 0, 0, 0, 0, 0, 0, 14, 7, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 10, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 10, 0, 0, 0, 0,
        0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0, 25, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 9, 0,
        0, 0, 64, 0, 0, 0, 54, 0, 0, 0, 9, 0, 0, 0, 128, 0, 0, 0, 30, 0, 0, 0, 11, 0, 0, 0, 192, 0,
        0, 0, 65, 0, 0, 0, 0, 0, 0, 14, 13, 0, 0, 0, 1, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 14, 13, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 17, 0, 0, 0, 88, 0, 0, 0, 21, 0, 0, 4, 168, 0, 0,
        0, 96, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 18, 0, 0, 0, 64, 0, 0, 0, 104, 0, 0,
        0, 18, 0, 0, 0, 128, 0, 0, 0, 108, 0, 0, 0, 18, 0, 0, 0, 192, 0, 0, 0, 112, 0, 0, 0, 18, 0,
        0, 0, 0, 1, 0, 0, 115, 0, 0, 0, 18, 0, 0, 0, 64, 1, 0, 0, 118, 0, 0, 0, 18, 0, 0, 0, 128,
        1, 0, 0, 122, 0, 0, 0, 18, 0, 0, 0, 192, 1, 0, 0, 126, 0, 0, 0, 18, 0, 0, 0, 0, 2, 0, 0,
        129, 0, 0, 0, 18, 0, 0, 0, 64, 2, 0, 0, 132, 0, 0, 0, 18, 0, 0, 0, 128, 2, 0, 0, 135, 0, 0,
        0, 18, 0, 0, 0, 192, 2, 0, 0, 138, 0, 0, 0, 18, 0, 0, 0, 0, 3, 0, 0, 141, 0, 0, 0, 18, 0,
        0, 0, 64, 3, 0, 0, 144, 0, 0, 0, 18, 0, 0, 0, 128, 3, 0, 0, 147, 0, 0, 0, 18, 0, 0, 0, 192,
        3, 0, 0, 155, 0, 0, 0, 18, 0, 0, 0, 0, 4, 0, 0, 158, 0, 0, 0, 18, 0, 0, 0, 64, 4, 0, 0,
        161, 0, 0, 0, 18, 0, 0, 0, 128, 4, 0, 0, 167, 0, 0, 0, 18, 0, 0, 0, 192, 4, 0, 0, 170, 0,
        0, 0, 18, 0, 0, 0, 0, 5, 0, 0, 173, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 13, 2, 0, 0, 0, 187, 0, 0, 0, 16, 0, 0, 0, 191, 0, 0, 0, 1, 0, 0, 12, 19, 0, 0,
        0, 205, 0, 0, 0, 1, 0, 0, 12, 19, 0, 0, 0, 216, 0, 0, 0, 1, 0, 0, 12, 19, 0, 0, 0, 228, 0,
        0, 0, 5, 0, 0, 4, 44, 1, 0, 0, 235, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 239, 0, 0, 0, 2, 0, 0,
        0, 32, 0, 0, 0, 243, 0, 0, 0, 2, 0, 0, 0, 64, 0, 0, 0, 248, 0, 0, 0, 27, 0, 0, 0, 96, 0, 0,
        0, 253, 0, 0, 0, 28, 0, 0, 0, 96, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 8, 25, 0, 0, 0, 4, 1, 0, 0,
        0, 0, 0, 8, 26, 0, 0, 0, 9, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 3, 0, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
        24, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 23, 1, 0, 0, 0, 0, 0, 14, 23, 0, 0, 0, 1, 0, 0, 0, 29,
        1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 30, 0, 0,
        0, 4, 0, 0, 0, 13, 0, 0, 0, 34, 1, 0, 0, 0, 0, 0, 14, 31, 0, 0, 0, 1, 0, 0, 0, 199, 3, 0,
        0, 1, 0, 0, 15, 44, 1, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 204, 3, 0, 0, 1, 0, 0,
        15, 13, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 212, 3, 0, 0, 3, 0, 0, 15, 80, 0, 0,
        0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 14, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 15, 0, 0, 0,
        48, 0, 0, 0, 32, 0, 0, 0, 0, 105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90,
        69, 95, 84, 89, 80, 69, 95, 95, 0, 116, 121, 112, 101, 0, 109, 97, 120, 95, 101, 110, 116,
        114, 105, 101, 115, 0, 114, 98, 0, 107, 101, 121, 95, 115, 105, 122, 101, 0, 118, 97, 108,
        117, 101, 95, 115, 105, 122, 101, 0, 114, 101, 115, 111, 108, 118, 101, 95, 97, 100, 100,
        114, 0, 105, 109, 112, 108, 95, 97, 100, 100, 114, 0, 112, 116, 95, 114, 101, 103, 115, 0,
        114, 49, 53, 0, 114, 49, 52, 0, 114, 49, 51, 0, 114, 49, 50, 0, 98, 112, 0, 98, 120, 0,
        114, 49, 49, 0, 114, 49, 48, 0, 114, 57, 0, 114, 56, 0, 97, 120, 0, 99, 120, 0, 100, 120,
        0, 115, 105, 0, 100, 105, 0, 111, 114, 105, 103, 95, 97, 120, 0, 105, 112, 0, 99, 115, 0,
        102, 108, 97, 103, 115, 0, 115, 112, 0, 115, 115, 0, 117, 110, 115, 105, 103, 110, 101,
        100, 32, 108, 111, 110, 103, 0, 99, 116, 120, 0, 114, 101, 115, 111, 108, 118, 101, 95,
        116, 114, 97, 99, 101, 0, 105, 109, 112, 108, 95, 116, 114, 97, 99, 101, 0, 105, 102, 117,
        110, 99, 95, 116, 114, 97, 99, 101, 0, 100, 97, 116, 97, 95, 116, 0, 112, 105, 100, 0, 117,
        105, 100, 0, 115, 105, 122, 101, 0, 99, 111, 109, 109, 0, 115, 116, 114, 0, 117, 56, 0, 95,
        95, 117, 56, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 99, 104, 97, 114, 0, 95, 100,
        97, 116, 97, 0, 99, 104, 97, 114, 0, 95, 108, 105, 99, 101, 110, 115, 101, 0, 47, 104, 111,
        109, 101, 47, 53, 50, 102, 117, 110, 110, 121, 47, 101, 98, 112, 102, 45, 116, 101, 115,
        116, 47, 46, 47, 115, 114, 99, 47, 98, 112, 102, 47, 105, 102, 117, 110, 99, 46, 98, 112,
        102, 46, 99, 0, 32, 32, 117, 54, 52, 32, 97, 100, 100, 114, 32, 61, 32, 80, 84, 95, 82, 69,
        71, 83, 95, 73, 80, 40, 99, 116, 120, 41, 59, 0, 32, 32, 98, 112, 102, 95, 112, 101, 114,
        102, 95, 101, 118, 101, 110, 116, 95, 111, 117, 116, 112, 117, 116, 40, 99, 116, 120, 44,
        32, 38, 114, 101, 115, 111, 108, 118, 101, 95, 97, 100, 100, 114, 44, 32, 66, 80, 70, 95,
        70, 95, 67, 85, 82, 82, 69, 78, 84, 95, 67, 80, 85, 44, 32, 38, 97, 100, 100, 114, 44, 0,
        105, 110, 116, 32, 66, 80, 70, 95, 85, 80, 82, 79, 66, 69, 40, 114, 101, 115, 111, 108,
        118, 101, 95, 116, 114, 97, 99, 101, 41, 32, 123, 0, 32, 32, 117, 54, 52, 32, 97, 100, 100,
        114, 32, 61, 32, 80, 84, 95, 82, 69, 71, 83, 95, 82, 67, 40, 99, 116, 120, 41, 59, 0, 32,
        32, 98, 112, 102, 95, 112, 101, 114, 102, 95, 101, 118, 101, 110, 116, 95, 111, 117, 116,
        112, 117, 116, 40, 99, 116, 120, 44, 32, 38, 105, 109, 112, 108, 95, 97, 100, 100, 114, 44,
        32, 66, 80, 70, 95, 70, 95, 67, 85, 82, 82, 69, 78, 84, 95, 67, 80, 85, 44, 32, 38, 97,
        100, 100, 114, 44, 0, 105, 110, 116, 32, 66, 80, 70, 95, 85, 82, 69, 84, 80, 82, 79, 66,
        69, 40, 105, 109, 112, 108, 95, 116, 114, 97, 99, 101, 41, 32, 123, 0, 105, 110, 116, 32,
        66, 80, 70, 95, 85, 82, 69, 84, 80, 82, 79, 66, 69, 40, 105, 102, 117, 110, 99, 95, 116,
        114, 97, 99, 101, 44, 32, 105, 110, 116, 32, 115, 105, 122, 101, 41, 32, 123, 0, 32, 32,
        115, 116, 114, 117, 99, 116, 32, 100, 97, 116, 97, 95, 116, 32, 116, 32, 61, 32, 123, 125,
        59, 0, 32, 32, 116, 46, 112, 105, 100, 32, 61, 32, 98, 112, 102, 95, 103, 101, 116, 95, 99,
        117, 114, 114, 101, 110, 116, 95, 112, 105, 100, 95, 116, 103, 105, 100, 40, 41, 32, 62,
        62, 32, 51, 50, 59, 0, 32, 32, 116, 46, 117, 105, 100, 32, 61, 32, 98, 112, 102, 95, 103,
        101, 116, 95, 99, 117, 114, 114, 101, 110, 116, 95, 117, 105, 100, 95, 103, 105, 100, 40,
        41, 59, 0, 32, 32, 98, 112, 102, 95, 103, 101, 116, 95, 99, 117, 114, 114, 101, 110, 116,
        95, 99, 111, 109, 109, 40, 116, 46, 99, 111, 109, 109, 44, 32, 115, 105, 122, 101, 111,
        102, 40, 116, 46, 99, 111, 109, 109, 41, 41, 59, 0, 32, 32, 99, 104, 97, 114, 32, 42, 115,
        32, 61, 32, 40, 118, 111, 105, 100, 32, 42, 41, 80, 84, 95, 82, 69, 71, 83, 95, 80, 65, 82,
        77, 49, 40, 99, 116, 120, 41, 59, 0, 32, 32, 116, 46, 115, 105, 122, 101, 32, 61, 32, 115,
        105, 122, 101, 59, 0, 32, 32, 98, 112, 102, 95, 112, 114, 111, 98, 101, 95, 114, 101, 97,
        100, 95, 117, 115, 101, 114, 40, 116, 46, 115, 116, 114, 44, 32, 115, 105, 122, 101, 111,
        102, 40, 116, 46, 115, 116, 114, 41, 44, 32, 115, 41, 59, 0, 32, 32, 98, 112, 102, 95, 114,
        105, 110, 103, 98, 117, 102, 95, 111, 117, 116, 112, 117, 116, 40, 38, 114, 98, 44, 32, 38,
        116, 44, 32, 115, 105, 122, 101, 111, 102, 40, 116, 41, 44, 32, 48, 41, 59, 0, 48, 58, 49,
        54, 0, 48, 58, 49, 48, 0, 48, 58, 49, 52, 0, 46, 98, 115, 115, 0, 108, 105, 99, 101, 110,
        115, 101, 0, 46, 109, 97, 112, 115, 0, 117, 112, 114, 111, 98, 101, 0, 117, 114, 101, 116,
        112, 114, 111, 98, 101, 0, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 44, 0,
        0, 0, 196, 1, 0, 0, 240, 1, 0, 0, 84, 0, 0, 0, 8, 0, 0, 0, 218, 3, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 20, 0, 0, 0, 225, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 96, 0, 0, 0, 22, 0,
        0, 0, 16, 0, 0, 0, 218, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 43, 1, 0, 0, 89, 1, 0, 0, 14, 160,
        0, 0, 8, 0, 0, 0, 43, 1, 0, 0, 89, 1, 0, 0, 7, 160, 0, 0, 24, 0, 0, 0, 43, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 43, 1, 0, 0, 119, 1, 0, 0, 3, 164, 0, 0, 80, 0, 0, 0, 43, 1,
        0, 0, 189, 1, 0, 0, 5, 156, 0, 0, 225, 3, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 43, 1, 0, 0, 221,
        1, 0, 0, 14, 196, 0, 0, 8, 0, 0, 0, 43, 1, 0, 0, 221, 1, 0, 0, 7, 196, 0, 0, 24, 0, 0, 0,
        43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 43, 1, 0, 0, 251, 1, 0, 0, 3, 200, 0, 0,
        80, 0, 0, 0, 43, 1, 0, 0, 62, 2, 0, 0, 5, 192, 0, 0, 96, 0, 0, 0, 43, 1, 0, 0, 94, 2, 0, 0,
        0, 228, 0, 0, 104, 0, 0, 0, 43, 1, 0, 0, 94, 2, 0, 0, 5, 228, 0, 0, 120, 0, 0, 0, 43, 1, 0,
        0, 137, 2, 0, 0, 17, 232, 0, 0, 160, 1, 0, 0, 43, 1, 0, 0, 161, 2, 0, 0, 11, 240, 0, 0,
        168, 1, 0, 0, 43, 1, 0, 0, 161, 2, 0, 0, 38, 240, 0, 0, 176, 1, 0, 0, 43, 1, 0, 0, 161, 2,
        0, 0, 9, 240, 0, 0, 184, 1, 0, 0, 43, 1, 0, 0, 205, 2, 0, 0, 11, 244, 0, 0, 192, 1, 0, 0,
        43, 1, 0, 0, 205, 2, 0, 0, 9, 244, 0, 0, 200, 1, 0, 0, 43, 1, 0, 0, 242, 2, 0, 0, 26, 252,
        0, 0, 216, 1, 0, 0, 43, 1, 0, 0, 242, 2, 0, 0, 3, 252, 0, 0, 232, 1, 0, 0, 43, 1, 0, 0, 34,
        3, 0, 0, 21, 16, 1, 0, 240, 1, 0, 0, 43, 1, 0, 0, 74, 3, 0, 0, 10, 20, 1, 0, 248, 1, 0, 0,
        43, 1, 0, 0, 91, 3, 0, 0, 25, 24, 1, 0, 8, 2, 0, 0, 43, 1, 0, 0, 91, 3, 0, 0, 3, 24, 1, 0,
        32, 2, 0, 0, 43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 2, 0, 0, 43, 1, 0, 0, 139, 3, 0, 0,
        3, 32, 1, 0, 80, 2, 0, 0, 43, 1, 0, 0, 94, 2, 0, 0, 5, 228, 0, 0, 16, 0, 0, 0, 218, 3, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 184, 3, 0, 0, 0, 0, 0, 0, 225, 3, 0, 0, 3, 0, 0, 0,
        0, 0, 0, 0, 17, 0, 0, 0, 189, 3, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 17, 0, 0, 0, 189, 3, 0, 0,
        0, 0, 0, 0, 232, 1, 0, 0, 17, 0, 0, 0, 194, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
        0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
        0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24,
        0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 24, 2, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 120, 2, 0, 0, 0, 0, 0, 0, 96, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 4, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 1, 0, 0, 0, 3,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 4, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0,
        1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 4, 0, 0, 0, 0, 0, 0, 80,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 143, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 5, 0, 0,
        0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 72, 5, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 104, 5, 0, 0, 0, 0, 0, 0, 231, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 13, 0, 0, 0, 0, 0, 0, 100, 2, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
